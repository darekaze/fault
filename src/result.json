[
  {
    "_line_no": 1,
    "code": "def partition(arr, low, high):\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 2,
    "code": "    i = (low - 1)\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 3,
    "code": "    pivot = arr[high]\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 4,
    "code": "    for j in range(low, high):\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 5,
    "code": "        if arr[j] <= pivot:\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 6,
    "code": "            i += 1\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 7,
    "code": "            arr[i], arr[j] = arr[j], arr[i]\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 8,
    "code": "    arr[i+1], arr[high] = arr[high], arr[i+1]\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 9,
    "code": "    return i  # bug\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 10,
    "code": "\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 11,
    "code": "\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 12,
    "code": "def quickSort(arr, low, high):\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 13,
    "code": "    if low < high:\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 14,
    "code": "        pi = partition(arr, low, high)\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 15,
    "code": "        quickSort(arr, low, pi-1)\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 16,
    "code": "        quickSort(arr, pi+1, high)\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 17,
    "code": "\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 18,
    "code": "\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 19,
    "code": "def qSort(li):\n",
    "coverage": [
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O",
      "O"
    ],
    "fl": {}
  },
  {
    "_line_no": 20,
    "code": "    n = len(li)\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 21,
    "code": "    quickSort(li, 0, n-1)\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  },
  {
    "_line_no": 22,
    "code": "    return li\n",
    "coverage": [
      "F",
      "F",
      "F",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "P",
      "P",
      "P",
      "F",
      "P",
      "P",
      "F",
      "F",
      "F",
      "P",
      "P",
      "F",
      "P",
      "F",
      "F",
      "F",
      "P",
      "F",
      "P",
      "F",
      "P"
    ],
    "fl": {}
  }
]